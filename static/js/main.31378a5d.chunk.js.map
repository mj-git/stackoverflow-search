{"version":3,"sources":["components/SearchResults.js","utils/CachedSearch.js","pages/Home.js","components/SearchBar.js","pages/Answers.js","App.js","serviceWorker.js","index.js"],"names":["useStyle","makeStyles","theme","inline","display","chip","margin","spacing","link","textDecoration","SearchResults","results","classes","Fragment","List","className","root","component","map","result","key","question_id","ListItem","alignItems","ListItemText","primary","to","title","secondary","tags","tag","Chip","size","color","label","Divider","CachedSearch","getData","resultsHandler","this","query","cache","cacheLimit","cacheHistory","length","shift","push","data","updateCacheHistory","progress","justifyContent","Home","useState","isLoading","setIsLoading","setResults","term","a","fetch","response","json","items","cachedSearch","useMemo","useEffect","getSearchResults","Typography","variant","align","CircularProgress","disableShrink","search","position","borderRadius","shape","backgroundColor","fade","palette","common","white","marginRight","marginLeft","width","breakpoints","up","searchIcon","height","pointerEvents","inputRoot","inputInput","padding","transition","transitions","create","SearchBar","onSearchInputChange","AppBar","Toolbar","noWrap","InputBase","placeholder","input","inputProps","onKeyPress","e","target","value","Answers","props","match","params","id","answers","setAnswers","question","setQuestion","qResponse","aResponse","questionData","answersData","getAnswers","ReactHtmlParser","body","answer_count","answer","answer_id","background","paper","content","flexGrow","overflow","container","paddingTop","paddingBottom","appBarSpacer","mixins","toolbar","textAlign","text","withRouter","history","searchTerm","setSearchTerm","Container","maxWidth","Grid","item","xs","Paper","path","exact","render","Boolean","window","location","hostname","ReactDOM","basename","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.31378a5d.chunk.js","sourcesContent":["import React from 'react';\r\nimport {\r\n  List,\r\n  ListItem,\r\n  ListItemText,\r\n  Divider,\r\n  makeStyles,\r\n  Chip\r\n} from '@material-ui/core';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst useStyle = makeStyles(theme => ({\r\n  inline: {\r\n    display: 'inline'\r\n  },\r\n  chip: {\r\n    margin: theme.spacing(1)\r\n  },\r\n  link: {\r\n    textDecoration: 'none'\r\n  }\r\n}));\r\n\r\nexport default function SearchResults({ results }) {\r\n  const classes = useStyle();\r\n  return (\r\n    <React.Fragment>\r\n      <List className={classes.root} component=\"nav\">\r\n        {results.map(result => (\r\n          <React.Fragment key={result.question_id}>\r\n            <ListItem alignItems=\"flex-start\">\r\n              <ListItemText\r\n                primary={\r\n                  <Link\r\n                    className={classes.link}\r\n                    to={`/${result.question_id}/${result.title}`}\r\n                  >\r\n                    {result.title}\r\n                  </Link>\r\n                }\r\n                secondary={\r\n                  <span>\r\n                    {result.tags.map(tag => (\r\n                      <Chip\r\n                        component=\"span\"\r\n                        key={tag}\r\n                        size=\"small\"\r\n                        color=\"secondary\"\r\n                        label={tag}\r\n                        className={classes.chip}\r\n                      />\r\n                    ))}\r\n                  </span>\r\n                }\r\n              />\r\n            </ListItem>\r\n\r\n            <Divider />\r\n          </React.Fragment>\r\n        ))}\r\n      </List>\r\n    </React.Fragment>\r\n  );\r\n}\r\n","export default class CachedSearch {\r\n  constructor(getData, resultsHandler) {\r\n    this.getData = getData;\r\n    this.resultsHandler = resultsHandler;\r\n\r\n    this.query = '';\r\n    this.cache = {};\r\n    this.cacheLimit = 5;\r\n    this.cacheHistory = [];\r\n  }\r\n\r\n  updateCacheHistory(query) {\r\n    if (this.cacheHistory.length === this.cacheLimit) {\r\n      delete this.cache[this.cacheHistory.shift()];\r\n    }\r\n    this.cacheHistory.push(query);\r\n  }\r\n\r\n  async getSearchResults(query) {\r\n    if (this.cache[query]) {\r\n      this.resultsHandler(this.cache[query]);\r\n    } else {\r\n      const data = await this.getData(query);\r\n      if (query) {\r\n        this.updateCacheHistory(query);\r\n        this.cache[query] = data;\r\n      }\r\n      this.resultsHandler(data);\r\n    }\r\n  }\r\n}\r\n","import React, { useState, useEffect, useMemo } from 'react';\r\nimport {\r\n  makeStyles,\r\n  Typography,\r\n  Divider,\r\n  CircularProgress\r\n} from '@material-ui/core';\r\nimport SearchResults from '../components/SearchResults';\r\nimport CachedSearch from '../utils/CachedSearch';\r\n\r\nconst useStyle = makeStyles(theme => ({\r\n  progress: {\r\n    justifyContent: 'center',\r\n    alignItems: 'center'\r\n  }\r\n}));\r\n\r\nexport default function Home({ query }) {\r\n  const classes = useStyle();\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [results, setResults] = useState([]);\r\n\r\n  async function getData(term) {\r\n    setIsLoading(true);\r\n    const response = await fetch(\r\n      `https://api.stackexchange.com/2.2/search/advanced?order=desc&sort=relevance&site=stackoverflow&q=${term}`\r\n    );\r\n\r\n    const data = await response.json();\r\n    setIsLoading(false);\r\n\r\n    return data.items;\r\n  }\r\n\r\n  const cachedSearch = useMemo(() => new CachedSearch(getData, setResults), []);\r\n\r\n  useEffect(() => {\r\n    cachedSearch.getSearchResults(query);\r\n  }, [query, cachedSearch]);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Typography component=\"h1\" variant=\"h6\" align=\"left\">\r\n        Search Results {query ? `for ${query}` : ''}\r\n      </Typography>\r\n      <Divider />\r\n      {!isLoading && <SearchResults results={results} />}\r\n      {isLoading && (\r\n        <CircularProgress\r\n          disableShrink\r\n          className={classes.progress}\r\n          size={100}\r\n          color=\"primary\"\r\n        />\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport {\r\n  AppBar,\r\n  Toolbar,\r\n  Typography,\r\n  makeStyles,\r\n  InputBase\r\n} from '@material-ui/core';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport { fade } from '@material-ui/core/styles';\r\n\r\nconst useStyle = makeStyles(theme => ({\r\n  search: {\r\n    position: 'relative',\r\n    borderRadius: theme.shape.borderRadius,\r\n    backgroundColor: fade(theme.palette.common.white, 0.15),\r\n    '&:hover': {\r\n      backgroundColor: fade(theme.palette.common.white, 0.25)\r\n    },\r\n    marginRight: theme.spacing(2),\r\n    marginLeft: 0,\r\n    width: '100%',\r\n    [theme.breakpoints.up('sm')]: {\r\n      marginLeft: theme.spacing(3),\r\n      width: 'auto'\r\n    }\r\n  },\r\n  searchIcon: {\r\n    width: theme.spacing(7),\r\n    height: '100%',\r\n    position: 'absolute',\r\n    pointerEvents: 'none',\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'center'\r\n  },\r\n  inputRoot: {\r\n    color: 'inherit'\r\n  },\r\n  inputInput: {\r\n    padding: theme.spacing(1, 1, 1, 7),\r\n    transition: theme.transitions.create('width'),\r\n    width: '100%',\r\n    [theme.breakpoints.up('md')]: {\r\n      width: 500\r\n    }\r\n  }\r\n}));\r\n\r\nexport default function SearchBar({ onSearchInputChange }) {\r\n  const classes = useStyle();\r\n  return (\r\n    <div>\r\n      <AppBar position=\"absolute\">\r\n        <Toolbar>\r\n          <Typography variant=\"h6\" noWrap>\r\n            Stackoverflow-Search\r\n          </Typography>\r\n          <div className={classes.search}>\r\n            <div className={classes.searchIcon}>\r\n              <SearchIcon />\r\n            </div>\r\n            <InputBase\r\n              placeholder=\"Search…\"\r\n              classes={{\r\n                root: classes.inputRoot,\r\n                input: classes.inputInput\r\n              }}\r\n              inputProps={{ 'aria-label': 'search' }}\r\n              onKeyPress={e => {\r\n                if (e.key === 'Enter') {\r\n                  onSearchInputChange(e.target.value);\r\n                }\r\n              }}\r\n            />\r\n          </div>\r\n        </Toolbar>\r\n      </AppBar>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport ReactHtmlParser from 'react-html-parser';\r\nimport {\r\n  Typography,\r\n  Divider,\r\n  List,\r\n  ListItem,\r\n  ListItemText,\r\n  CircularProgress,\r\n  makeStyles\r\n} from '@material-ui/core';\r\n\r\n// https://api.stackexchange.com/2.2/questions/{props.match.params.id}/answers?order=desc&sort=activity&site=stackoverflow&filter=!9Z(-wzu0T\r\n\r\n// https://api.stackexchange.com/2.2/questions/57831065?order=desc&sort=activity&site=stackoverflow&filter=!9Z(-wwYGT\r\n\r\nconst useStyle = makeStyles(theme => ({\r\n  progress: {\r\n    justifyContent: 'center',\r\n    alignItems: 'center'\r\n  }\r\n}));\r\n\r\nexport default function Answers(props) {\r\n  const classes = useStyle();\r\n  const { id, title } = props.match.params;\r\n  const [answers, setAnswers] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [question, setQuestion] = useState({});\r\n  useEffect(() => {\r\n    async function getAnswers() {\r\n      setIsLoading(true);\r\n      const qResponse = await fetch(\r\n        `https://api.stackexchange.com/2.2/questions/${id}?order=desc&sort=activity&site=stackoverflow&filter=!9Z(-wwYGT`\r\n      );\r\n      const aResponse = await fetch(\r\n        `https://api.stackexchange.com/2.2/questions/${id}/answers?order=desc&sort=activity&site=stackoverflow&filter=!9Z(-wzu0T`\r\n      );\r\n      const questionData = await qResponse.json();\r\n      const answersData = await aResponse.json();\r\n      setQuestion(questionData.items[0]);\r\n      setAnswers(answersData.items);\r\n      setIsLoading(false);\r\n    }\r\n\r\n    getAnswers();\r\n  }, [id]);\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <CircularProgress\r\n        disableShrink\r\n        className={classes.progress}\r\n        size={100}\r\n        color=\"primary\"\r\n      />\r\n    );\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Typography color=\"textPrimary\" variant=\"h5\" align=\"left\">\r\n        {title}\r\n      </Typography>\r\n      <Divider />\r\n\r\n      <List component=\"nav\">\r\n        <ListItem>\r\n          <ListItemText primary={ReactHtmlParser(question.body)}></ListItemText>\r\n        </ListItem>\r\n        <ListItem>\r\n          <ListItemText\r\n            primary={\r\n              <Typography variant=\"h6\">\r\n                {question.answer_count\r\n                  ? `${question.answer_count} Answers`\r\n                  : ''}\r\n              </Typography>\r\n            }\r\n          />\r\n        </ListItem>\r\n        <Divider />\r\n\r\n        {answers.map(answer => (\r\n          <React.Fragment key={answer.answer_id}>\r\n            <ListItem>\r\n              <ListItemText\r\n                primary={ReactHtmlParser(answer.body)}\r\n              ></ListItemText>\r\n            </ListItem>\r\n            <Divider />\r\n          </React.Fragment>\r\n        ))}\r\n      </List>\r\n    </React.Fragment>\r\n  );\r\n}\r\n","import React, { useState } from 'react';\r\nimport { Route, Switch, withRouter } from 'react-router-dom';\r\nimport { makeStyles, Container, Grid, Paper } from '@material-ui/core';\r\nimport Home from './pages/Home';\r\nimport SearchBar from './components/SearchBar';\r\nimport Answers from './pages/Answers';\r\n\r\nconst useStyle = makeStyles(theme => ({\r\n  root: {\r\n    display: 'flex',\r\n    backgroundColor: theme.palette.background.paper\r\n  },\r\n  content: {\r\n    flexGrow: 1,\r\n    height: '100vh',\r\n    overflow: 'auto'\r\n  },\r\n  progress: {\r\n    justifyContent: 'center',\r\n    alignItems: 'center'\r\n  },\r\n  container: {\r\n    paddingTop: theme.spacing(4),\r\n    paddingBottom: theme.spacing(4)\r\n  },\r\n  appBarSpacer: theme.mixins.toolbar,\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    textAlign: 'center',\r\n    color: theme.palette.text.secondary\r\n  }\r\n}));\r\n\r\nfunction App({ history }) {\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n\r\n  const classes = useStyle();\r\n  return (\r\n    <div className={classes.root}>\r\n      <SearchBar\r\n        onSearchInputChange={term => {\r\n          history.push('/');\r\n          setSearchTerm(term);\r\n        }}\r\n      ></SearchBar>\r\n\r\n      <main className={classes.content}>\r\n        <div className={classes.appBarSpacer} />\r\n        <Container maxWidth=\"lg\" className={classes.container}>\r\n          <Grid container spacing={3}>\r\n            <Grid item xs={12}>\r\n              <Paper className={classes.paper}>\r\n                <Switch>\r\n                  <Route\r\n                    path=\"/\"\r\n                    exact\r\n                    render={props => <Home {...props} query={searchTerm} />}\r\n                  ></Route>\r\n                  <Route path=\"/:id/:title\" component={Answers} />\r\n                  <Route\r\n                    render={() => <h1>404..Page doesn't exist</h1>}\r\n                  ></Route>\r\n                </Switch>\r\n              </Paper>\r\n            </Grid>\r\n          </Grid>\r\n        </Container>\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default withRouter(App);\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport { BrowserRouter } from 'react-router-dom';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <BrowserRouter basename=\"/stackoverflow-search\">\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}